@use "sass:math";
@use "sass:map";
@use '../config/variables' as *;
@use '../config/functions' as *;

/// Generate a fluid type sequence from the min font size to the max font size
/// Interesting CSS alternative : clamp(1rem, 2.5vw, 2rem), waiting for better browser support
/// Media queries are generated from min and max viewport with parameters
/// @example
///   fluid-type(25, 35)
///   fluid-type(25, 35, 250, 1920)
/// @require {function} rem
/// @require {function} strip-unit
/// @param {number} $min-font-size - min font size
/// @param {number} $max-font-size - max font size
/// @param {number} $min-vw [375] - min viewport with
/// @param {number} $max-vw [1440] - max viewport with 
@mixin fluid-type($min-font-size, $max-font-size, $variableName: null, $min-vw: 375, $max-vw: 1440) {
  $min: toRem($min-vw);
  $max: toRem($max-vw);

  @if $variableName == null {
    $variableName: font-size;
  } @else {
    $variableName: $variableName;
  }

  & {
    font-size: toRem($min-font-size);
    @media screen and (min-width: $min) {
      font-size: calc(
        #{toRem($min-font-size)} + 
        #{math.div($max-font-size, 16) - math.div($min-font-size, 16)} * 
        (
          (100vw - #{toRem($min-vw)}) / 
          #{strip-unit(math.div($max-vw, 16) - math.div($min-vw, 16))}
        )
      );
    }
    @media screen and (min-width: $max) {
      font-size: toRem($max-font-size);
    }
  }
}

/// Generate a fluid type sequence from the min font size to the max font size
/// Interesting CSS alternative : clamp(1rem, 2.5vw, 2rem), waiting for better browser support
/// Media queries are generated from min and max viewport with parameters
/// @example
///   fluid-type(25, 35)
///   fluid-type(25, 35, 250, 1920)
/// @require {function} rem
/// @require {function} strip-unit
/// @param {number} $min-font-size - min font size
/// @param {number} $max-font-size - max font size
/// @param {number} $min-vw [375] - min viewport with
/// @param {number} $max-vw [1440] - max viewport with 
@mixin fluid-type-variable($variableName, $min-font-size, $max-font-size, $min-vw: 375, $max-vw: 1440) {
  $min: toRem($min-vw);
  $max: toRem($max-vw);

  & {
    #{$variableName}: toRem($min-font-size);
    @media screen and (min-width: $min) {
      #{$variableName}: calc(
        #{toRem($min-font-size)} + 
        #{math.div($max-font-size, 16) - math.div($min-font-size, 16)} * 
        (
          (100vw - #{toRem($min-vw)}) / 
          #{strip-unit(math.div($max-vw, 16) - math.div($min-vw, 16))}
        )
      );
    }
    @media screen and (min-width: $max) {
      #{$variableName}: toRem($max-font-size);
    }
  }
}

/// @require {variable} spacers
/// @param {variable} map
/// Generate utility classes from a spacer map
/// @example css
///   .maauto
///   .ptxl
/// @example sass
///   @include generateSpacers($spacers);
@mixin generateSpacers($map) {
  :root {
    @each $name, $value in $map {
      --spacer-#{$name}: #{map.get($value, 'mobile')};
    }
  }
  
  @media (min-width: 40rem) {
    :root {
      @each $name, $value in $map {
        --spacer-#{$name}: #{map.get($value, 'desktop')};
      }
    }
  }

  @each $name, $value in $map {
    // Margins
    .ma#{$name} {margin: var(--spacer-#{$name});}
    .mt#{$name} {margin-top: var(--spacer-#{$name});}
    .mr#{$name} {margin-right: var(--spacer-#{$name});}
    .mb#{$name} {margin-bottom: var(--spacer-#{$name});}
    .ml#{$name} {margin-left: var(--spacer-#{$name});}
    .mh#{$name} {
      margin-left: var(--spacer-#{$name});
      margin-right: var(--spacer-#{$name});
    }
    .mv#{$name} {
      margin-top: var(--spacer-#{$name});
      margin-bottom: var(--spacer-#{$name});
    }
    
    // Paddings
    .pa#{$name} {padding: var(--spacer-#{$name});}
    .pt#{$name} {padding-top: var(--spacer-#{$name});}
    .pb#{$name} {padding-bottom: var(--spacer-#{$name});}
    .pr#{$name} {padding-right: var(--spacer-#{$name});}
    .pl#{$name} {padding-left: var(--spacer-#{$name});}
    .ph#{$name} {
      padding-left: var(--spacer-#{$name});
      padding-right: var(--spacer-#{$name});
    }
    .pv#{$name} {
      padding-top: var(--spacer-#{$name});
      padding-bottom: var(--spacer-#{$name});
    }

    // Height
    .h#{$name} {height: var(--spacer-#{$name});}
  }
}


/// @require {variable} map
/// Generate different font sizes utility classes & css variables
/// @example css
///   .is-size-m
///   --font-size-m
/// @example sass
///   @include generateSizes($sizes);
@mixin generateSizes($map) {
  :root {
    @each $name, $value in $map {
      @if (map.get($value, 'mobile') == map.get($value, 'desktop')) {
        --font-size-#{$name}: #{toRem(map.get($value, 'desktop'))};
      } @else {
        @include fluid-type-variable(--font-size-#{$name}, map.get($value, 'mobile'), map.get($value, 'desktop'))
      }
    }
  }

  @each $name, $value in $map {
    .is-size-#{$name} {font-size: var(--font-size-#{$name});}
  }
}

/// @require {variable} breakpoint
/// Generate breakpoint syntax
/// @example sass
///   @include mq(small){...};
@mixin mq($breakpoint, $other: false) {
  $size: map.get($breakpoints, $breakpoint);
  @if ($other) {
    @media (min-width: $size) and ($other) {
      @content;
    }
  } @else {
    @media (min-width: $size) {
      @content;
    }
  }
}

/// @require {variable} breakpoint
/// Generate breakpoint syntax
/// @example sass
///   @include mq-max(small){...};
@mixin mq-max($breakpoint, $other: false) {
  $size: map.get($breakpoints, $breakpoint);
  @if ($other) {
    @media (max-width: $size) and ($other) {
      @content;
    }
  } @else {
    @media (max-width: $size) {
      @content;
    }
  }
}

/// @require {variable} breakpoint-min
/// @require {variable} breakpoint-max
/// Generate breakpoint syntax
/// @example sass
///   @include mq-between(small, intermediary){...};
@mixin mq-between($breakpoint-min, $breakpoint-max) {
  $size-min: map.get($breakpoints, $breakpoint-min);
  $size-max: map.get($breakpoints, $breakpoint-max);
  @media (max-width: $size-max) and (min-width: $size-min) {
    @content;
  }
}

/// Map deep get
/// @author Kitty Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
      $map: map.get($map, $key);
  }
  @return $map;
}

@mixin sr-only() {
  border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute !important;
	width: 1px;	
	word-wrap: normal !important; /* Many screen reader and browser combinations announce broken words as they would appear visually. */
}